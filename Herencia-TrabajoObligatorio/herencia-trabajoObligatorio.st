Object subclass: #GestorVehiculos	instanceVariableNames: 'colVehiculos'	classVariableNames: ''	package: 'herencia-trabajoObligatorio'!!GestorVehiculos methodsFor: 'as yet unclassified' stamp: 'GabrielF 5/15/2021 19:26'!inicializarGestor	colVehiculos := OrderedCollection new.! !!GestorVehiculos methodsFor: 'as yet unclassified' stamp: 'GabrielF 5/15/2021 19:26'!agregarVehiculo: unVehiculo	colVehiculos add: unVehiculo.! !!GestorVehiculos methodsFor: 'as yet unclassified' stamp: 'GabrielF 5/16/2021 18:44'!generarListaDeVehiculos	| resultado listaDatos patente kmActual |	"Zona de inicializacion de variables"	listaDatos := OrderedCollection new.	listaDatos := colVehiculos		collect: [ :vehiculo | 			patente := vehiculo getPatente.			kmActual := vehiculo getKmActual.			resultado := 'patente: ' , patente , ' kmActual: '				, kmActual asString.			].	^ listaDatos! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GestorVehiculos class	instanceVariableNames: ''!!GestorVehiculos class methodsFor: 'as yet unclassified' stamp: 'GabrielF 5/15/2021 19:26'!crearGestor	|gestor|		gestor := self new.		gestor inicializarGestor .		^gestor.! !Object subclass: #Vehiculo	instanceVariableNames: 'patente cantKmRecorridos kmActual marca velocidadMaxima'	classVariableNames: ''	package: 'herencia-trabajoObligatorio'!!Vehiculo methodsFor: 'as yet unclassified' stamp: 'GabrielF 5/16/2021 19:05'!inicializarPatenteV: unaPatente conKmRecorridos: unaCantKmR conKmActual: unaCantKmA conMarca: unaMarca conVelMax: unaVelocidadMax	patente := unaPatente.	cantKmRecorridos := unaCantKmR.	kmActual := unaCantKmA.	marca := unaMarca.	velocidadMaxima := unaVelocidadMax.		! !!Vehiculo methodsFor: 'getters' stamp: 'GabrielF 5/15/2021 18:43'!getPatente^patente.! !!Vehiculo methodsFor: 'getters' stamp: 'GabrielF 5/15/2021 19:45'!getKmActual^kmActual ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vehiculo class	instanceVariableNames: ''!!Vehiculo class methodsFor: 'as yet unclassified' stamp: 'GabrielF 5/16/2021 19:05'!crearPatenteV: unaPatente conKmRecorridos: unaCantKmR conKmActual: unaCantKmA conMarca: unaMarca conVelMax: unaVelocidadMax	| vehiculo |	vehiculo := self new.	vehiculo		inicializarPatenteV: unaPatente conKmRecorridos: unaCantKmR conKmActual: unaCantKmA conMarca: unaMarca conVelMax: unaVelocidadMax.	^ vehiculo! !Vehiculo subclass: #Auto	instanceVariableNames: 'cantPuertas'	classVariableNames: ''	package: 'herencia-trabajoObligatorio'!!Auto methodsFor: 'setters' stamp: 'GabrielF 4/2/2021 18:13'!setCantKmRecorridos: unaCantKmcantKmRecorridos := unaCantKm ! !!Auto methodsFor: 'setters' stamp: 'GabrielF 4/2/2021 18:12'!setMarca: unaMarcamarca := unaMarca .! !!Auto methodsFor: 'setters' stamp: 'GabrielF 4/2/2021 18:12'!setPatente: unaPatentepatente := unaPatente .! !!Auto methodsFor: 'as yet unclassified' stamp: 'GabrielF 5/23/2021 16:20'!inicializarConCantPuertas: unaCantP cantPuertas := unaCantP.! !!Auto methodsFor: 'aplication' stamp: 'GabrielF 4/2/2021 18:19'!andarKm: n^cantKmRecorridos + n! !!Auto methodsFor: 'aplication' stamp: 'GabrielF 4/2/2021 19:17'!compararPatente: unaPatente	"MÃ©todo que compara la patente de dos objetos de tipo auto, para ello utiliza la	sentencia self, para referirse a la instancia del mensaje.	"	^ self getPatente == unaPatente! !!Auto methodsFor: 'getters' stamp: 'GabrielF 4/2/2021 18:12'!getCantKmRecorridos ^cantKmRecorridos ! !!Auto methodsFor: 'getters' stamp: 'GabrielF 4/2/2021 18:11'!getPatente^patente! !!Auto methodsFor: 'getters' stamp: 'GabrielF 4/2/2021 18:11'!getMarca^marca! !!Auto methodsFor: 'initialization' stamp: 'GabrielF 5/17/2021 19:36'!inicializarPatenteA: unaPatente conKmRecorridos: unaCantKmR conKmActual: unaCantKmA conMarca: unaMarca conVelMax: unaVelocidadMax conCantPuertas: unaCantP	self inicializarPatenteV: unaPatente conKmRecorridos: unaCantKmR conKmActual: unaCantKmA conMarca: unaMarca 	conVelMax: unaVelocidadMax.	cantPuertas := unaCantP! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Auto class	instanceVariableNames: ''!!Auto class methodsFor: 'as yet unclassified' stamp: 'GabrielF 5/16/2021 19:14'!crearPatenteV: unaPatente conKmRecorridos: unaCantKmR conKmActual: unaCantKmA conMarca: unaMarca conVelMax: unaVelocidadMax conCantP: unaCantP 	| auto |	auto := self crearPatenteV: unaPatente conKmRecorridos: unaCantKmR conKmActual: unaCantKmA conMarca: unaMarca conVelMax: unaVelocidadMax.		auto inicializarConCantPuertas: unaCantP.	^ auto! !Vehiculo subclass: #Camion	instanceVariableNames: 'tipo kmService tara'	classVariableNames: ''	package: 'herencia-trabajoObligatorio'!!Camion methodsFor: 'setters' stamp: 'GabrielF 5/15/2021 18:44'!setPatente: unaPatente	patente := unaPatente.! !!Camion methodsFor: 'setters' stamp: 'GabrielF 4/2/2021 19:21'!setTipo: unTipotipo := unTipo.! !!Camion methodsFor: 'setters' stamp: 'GabrielF 4/2/2021 19:22'!setTara: unaTara	tara := unaTara.! !!Camion methodsFor: 'setters' stamp: 'GabrielF 4/2/2021 19:21'!setKmActual: unKmActualkmActual := unKmActual.! !!Camion methodsFor: 'setters' stamp: 'GabrielF 4/2/2021 19:22'!setKmService: unKmService	kmService := unKmService .! !!Camion methodsFor: 'getters' stamp: 'GabrielF 5/15/2021 18:43'!getPatente	^ patente! !!Camion methodsFor: 'getters' stamp: 'GabrielF 4/2/2021 19:20'!getKmActual^kmActual ! !!Camion methodsFor: 'getters' stamp: 'GabrielF 4/2/2021 19:21'!getTara^tara.! !!Camion methodsFor: 'getters' stamp: 'GabrielF 4/2/2021 19:20'!getKmService^kmService ! !!Camion methodsFor: 'getters' stamp: 'GabrielF 4/2/2021 19:20'!getTipo^tipo.! !!Camion methodsFor: 'initialization' stamp: 'GabrielF 5/17/2021 19:53'!inicializarPatenteC: unaPatente conKmRecorridos: unaCantKmR conKmActual: unaCantKmA conMarca: unaMarca conVelMax: unaVelocidadMax conTipo: unTipo conKmService: unKmService conTara: unaTara	self		inicializarPatenteV: unaPatente		conKmRecorridos: unaCantKmR		conKmActual: unaCantKmA		conMarca: unaMarca		conVelMax: unaVelocidadMax.	tipo := unTipo.	kmService := unKmService.	tara := unaTara! !!Camion methodsFor: 'as yet unclassified' stamp: 'GabrielF 4/2/2021 19:39'!verificarService	"Metodo que verifica si la instancia actual supero el kilometraje para realizar service"	^ kmActual > kmService! !!Camion methodsFor: 'as yet unclassified' stamp: 'GabrielF 4/2/2021 19:50'!verificarTara: n	^tara > n.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Camion class	instanceVariableNames: ''!!Camion class methodsFor: 'as yet unclassified' stamp: 'GabrielF 5/16/2021 19:19'!crearPatenteV: unaPatente conKmRecorridos: unaCantKmR conKmActual: unaCantKmA conMarca: unaMarca conVelMax: unaVelocidadMax conTipo: unTipo conKmService: unKmService conTara: unaTara	| camion |	camion := self		crearPatenteV: unaPatente		conKmRecorridos: unaCantKmR		conKmActual: unaCantKmA		conMarca: unaMarca		conVelMax: unaVelocidadMax.	camion		inicializarConTipo: unTipo		conKmService: unKmService		conTara: unaTara.	^ camion! !